# 튜플
# 시퀀스자료형 (순서가 있는 자료형을 의미)
# 수정, 추가, 삭제가 불가능한 리스트
# 읽기만 가능한데 왜 쓰냐?
# 1. 메모리 사용이 효율적 -> 리스트는 계속 바뀌기 때문에
# 2. 읽기만 가능하기 때문에, 데이터 변조 혹은 손실의 위험이 없다.

# 튜플의 특징은 ()를 사용한다. 괄호는 생략이 가능하다.
# 리스트는 [] 대괄호
# 사전형은 {} 중괄호

# 튜플의 특징

# 튜플은 선언할때 2가지 방식이 있다

num1 = (1, 2, 3)
num2 = 1, 2, 3

# 또하나의 특징은 만일 튜플에 하나의 수만 넣을때 꼭 쉼표를 넣어줘야 한다.

num3 = (1,)
num4 = 1,

# 패킹, 언패킹 개념
# 패킹 언패킹의 개념은 시퀀스 자료형은 이용할수 있다.

# 패킹 - 여러개의 데이터를 하나의 변수에 넣는것
# 언패킹 - 컬렉션의 각 데이터를 각각의 변수에 넣는것

# 패킹
numbers = 1, 2, 3

# 언패킹
n1, n2, n3 = numbers


a, b, c = 1, 2, 3

print(n1, n2, n3)
print(a, b, c)

# 1. 특정값의 인덱스 구하기
# 2. 특정값의 개수
# 3. 최대값, 최소값
# 4. 합계

serises = (10, 20, 30, 40, 50, 60, 60, 70)

# 1. 인덱스
print(serises.index(20))

# 2. 카운트
serises.count(60)

# 3. 최대값
print(max(serises))
print(min(serises))

# 4. 합계
print(sum(serises))
